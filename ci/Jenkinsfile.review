// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

def GetBranch() {
    def branch = env.GERRIT_BRANCH
    if ( branch == null ) {
        branch = env.BRANCH_NAME
    }
    return branch
}

def InstallBestie() {
    dir("${BESTIEDIR}") {
        sh 'mkdir -p ${B5DIR}'
        sh 'make install PREFIX=$B5DIR'
    }
}

def CloneHorselandRepo( String repo ) {
    dir("${B5PATH}/arista.com/horseland/${repo}") {
        if ( repo == env.GERRIT_PROJECT ) {
            checkout scm
            sh "git fetch origin refs/notes/barney"
            sh "git update-ref refs/notes/barney FETCH_HEAD"
        } else {
            checkout([$class: 'GitSCM', branches: [[name: GetBranch()]],
                      userRemoteConfigs: [
                        [url: "https://horseland-gerrit.infra.corp.arista.io/${repo}.git"]
                    ]])
        }
        sh 'git config --local uploadpack.allowAnySHA1InWant True'
    }
}

pipeline {
    agent {
        label 'page-size-jenkins-slave'
    }
    environment {
        GOPATH = "${WORKSPACE}/go"
        GOCACHE = "${WORKSPACE}/gocache"
        B5PATH = "${WORKSPACE}/go/src"
        BESTIEREPO = "arista.com/horseland/bestie"
        BESTIEDIR = "${B5PATH}/${BESTIEREPO}"
        B5DIR = "${WORKSPACE}"
        B5CACHE = "${B5DIR}"
    }
    stages {
        stage ('Container') {
            agent {
                docker {
                    reuseNode true
                    image "docker.corp.arista.io/barney/scribe:"+GetBranch()
                    alwaysPull true
                    args '--privileged'
                }
            }
            stages {
                stage('Setup') {
                    steps {
                        gerritReview labels: [Verified: 0]
                        sh '''
                        env
                        id -a
                        uname -a
                        mount
                        '''
                        CloneHorselandRepo( "bestie" )
                        sh "mkdir -p ${GOCACHE}"
                    }
                }
                stage('Format') {
                    steps {
                        dir( "$BESTIEDIR" ) {
                            sh 'test -z "$(git diff-tree --no-commit-id --name-only -r HEAD | grep -E ".go\$" | xargs gofmt -l)"'
                        }
                    }
                }
                stage('Install') {
                    steps {
                        InstallBestie()
                    }
                }
                stage('BD') {
                    when {
                        expression {
                            dir ( "$BESTIEDIR" ) {
                                sh(script: 'b5 imagebom .', returnStatus: true) != 0
                            }
                        }
                    }
                    steps {
                        dir( "$BESTIEDIR" ) {
                            // Self-scribe, but don't push the notes.
                            sh 'scribeNotes.sh'
                        }
                    }
                }
                stage('B5 Test') {
                    steps {
                        dir( "$BESTIEDIR" ) {
                            sh 'env PATH=$B5DIR/bin:$PATH b5 -v test .'
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            gerritReview labels: [Verified: 1], message: "$BUILD_URL"
        }
        failure {
            gerritReview labels: [Verified: -1], message: "$BUILD_URL"
        }
    }
}
